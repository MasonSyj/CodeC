I'm using the linked list. Each carpark has two carpark pointers, one point to its parent carpark, one is to the next carpark.
My solution is straightforwad, for a carpark, I chose an ACE car means it can go straight to the exit without any obstacles. 
There might be several moves between the car and the exit, those moves will have its carpark as well, but it will not be in the linked list.
Except the final one, which the ACE car reaches the exit, meaning it will be wiped out from the carpark.
Then I proceed to this carpark(in this linked list it will be added as the 'next' carpark), then repeat the above stragegy.

However, there might be cases that there is not ACE car, then comes the brute-force approach.
I create many carparks which each one I seek if there is ACE car again.
If there is, I will be working on this one to repeat the abvoe stragegy.
But!!, there might still be carparks created by brute-force approach which appear useless.
So i make a clean() function, to free all uninvestigated carparks(it might be useful but I have a better way).
